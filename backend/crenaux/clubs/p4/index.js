/**
 * P4 Padel Indoor - Module principal
 * Impl√©mente la requ√™te POST directe pour obtenir les cr√©neaux disponibles
 * Version optimis√©e avec les en-t√™tes exacts comme demand√© par l'utilisateur
 * Utilise le syst√®me de gestion multi-comptes pour la rotation des cookies
 * Affiche la r√©ponse brute pour analyse
 */

const axios = require('axios');
const { getNextAccount } = require('./cookie-manager');

// URL de base et endpoints
const BASE_URL = 'https://p4-padel-indoor.gestion-sports.com';
const RESERVATION_ENDPOINT = '/membre/reservation.html';
const SPORT_ID = '1057'; // ID du sport Padel

// Syst√®me de cache am√©lior√©
const cache = {
  slots: new Map(), // Map pour stocker les cr√©neaux par date et plage horaire
  timestamps: new Map(), // Map pour stocker les timestamps des derni√®res requ√™tes
  CACHE_DURATION: 5 * 60 * 1000, // 5 minutes en millisecondes
  
  /**
   * G√©n√®re une cl√© de cache unique bas√©e sur les param√®tres de recherche
   * @param {string} date - Date au format YYYY-MM-DD
   * @param {number} startHour - Heure de d√©but de la plage
   * @param {number} endHour - Heure de fin de la plage
   * @returns {string} Cl√© de cache unique
   */
  generateKey(date, startHour, endHour) {
    return `${date}_${startHour}-${endHour}`;
  },
  
  /**
   * V√©rifie si les donn√©es en cache sont valides pour une cl√© donn√©e
   * @param {string} key - Cl√© de cache
   * @returns {boolean} True si le cache est valide, false sinon
   */
  isValid(key) {
    if (!this.timestamps.has(key)) return false;
    
    const timestamp = this.timestamps.get(key);
    const now = Date.now();
    const isValid = (now - timestamp) < this.CACHE_DURATION;
    
    console.log(`[CACHE] V√©rification pour ${key}:`);
    console.log(`- Timestamp: ${new Date(timestamp).toLocaleString()}`);
    console.log(`- Maintenant: ${new Date(now).toLocaleString()}`);
    console.log(`- √Çge: ${((now - timestamp) / 1000).toFixed(1)} secondes`);
    console.log(`- Validit√©: ${isValid ? 'VALIDE' : 'EXPIR√â'} (max ${this.CACHE_DURATION / 1000} secondes)`);
    
    return isValid;
  },
  
  /**
   * R√©cup√®re les donn√©es en cache si elles sont valides
   * @param {string} key - Cl√© de cache
   * @returns {Array|null} Donn√©es en cache ou null si invalides/inexistantes
   */
  get(key) {
    if (!this.isValid(key)) return null;
    console.log(`[CACHE] ‚úÖ Utilisation des donn√©es en cache pour ${key}`);
    return this.slots.get(key);
  },
  
  /**
   * Stocke des donn√©es dans le cache
   * @param {string} key - Cl√© de cache
   * @param {Array} data - Donn√©es √† stocker
   */
  set(key, data) {
    this.slots.set(key, data);
    this.timestamps.set(key, Date.now());
    console.log(`[CACHE] üìù Mise en cache de ${data.length} cr√©neaux pour ${key}`);
  },
  
  /**
   * Nettoie les entr√©es expir√©es du cache
   */
  cleanup() {
    const now = Date.now();
    let expiredCount = 0;
    
    // Parcourir toutes les entr√©es du cache
    for (const [key, timestamp] of this.timestamps.entries()) {
      if (now - timestamp > this.CACHE_DURATION) {
        this.slots.delete(key);
        this.timestamps.delete(key);
        expiredCount++;
      }
    }
    
    if (expiredCount > 0) {
      console.log(`[CACHE] üßπ Nettoyage: ${expiredCount} entr√©es expir√©es supprim√©es`);
    }
    
    console.log(`[CACHE] üìä √âtat actuel: ${this.slots.size} entr√©es en cache`);
  }
};

// Importer les fonctions auxiliaires de slotFinder
const slotFinder = require('./slotFinder');

/**
 * Convertit une date du format YYYY-MM-DD au format DD/MM/YYYY
 * @param {string} dateStr - Date au format YYYY-MM-DD
 * @returns {string} Date au format DD/MM/YYYY
 */
function formatDateForApi(dateStr) {
  const [year, month, day] = dateStr.split('-');
  return `${day}/${month}/${year}`;
}

/**
 * Cr√©e les en-t√™tes HTTP pour les requ√™tes
 * @param {Object} account - Compte avec cookies
 * @returns {Object} En-t√™tes HTTP
 */
function createHeaders(account) {
  return {
    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
    'X-Requested-With': 'XMLHttpRequest',
    'Referer': `${BASE_URL}${RESERVATION_ENDPOINT}`,
    'Cookie': account.cookieHeader,
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:138.0) Gecko/20100101 Firefox/138.0',
  };
}

// Note: La fonction isCacheValid a √©t√© remplac√©e par la m√©thode cache.isValid()

/**
 * Envoie une requ√™te POST √† l'API P4 pour r√©cup√©rer les cr√©neaux disponibles
 * @param {string} date - Date au format YYYY-MM-DD
 * @param {string} hour - Heure au format HH:MM
 * @returns {Promise<Object>} R√©ponse de l'API
 */
async function sendPostRequest(date, hour) {
  const formattedDate = formatDateForApi(date);
  
  // R√©cup√©rer un compte disponible avec ses cookies
  const account = getNextAccount();
  if (!account) throw new Error('Aucun compte disponible avec des cookies valides');
  
  const data = `ajax=loadCourtDispo&hour=${hour}&date=${formattedDate}&idSport=1057`;
  
  // Construire les en-t√™tes avec les cookies
  const headers = {
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:138.0) Gecko/20100101 Firefox/138.0',
    'Accept': 'application/json, text/javascript, */*; q=0.01',
    'Accept-Language': 'fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3',
    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
    'X-Requested-With': 'XMLHttpRequest',
    'Origin': BASE_URL,
    'Connection': 'keep-alive',
    'Referer': `${BASE_URL}/membre/reservation.html`,
    'Cookie': account.cookieHeader,
    'Sec-Fetch-Dest': 'empty',
    'Sec-Fetch-Mode': 'cors',
    'Sec-Fetch-Site': 'same-origin'
  };
  
  // Afficher les d√©tails de la requ√™te pour le debug
  console.log('[DEBUG] Requ√™te POST:');
  console.log(`URL: ${BASE_URL}/membre/reservation.html`);
  console.log(`Donn√©es: ${data}`);
  console.log(`En-t√™tes: ${JSON.stringify(headers).substring(0, 100)}...`);
  console.log(`Compte utilis√©: ${account.id}`);
  
  try {
    // Envoyer la requ√™te POST
    const response = await axios.post(`${BASE_URL}/membre/reservation.html`, data, { headers });
    
    // V√©rifier si la r√©ponse est valide
    if (response.status === 200) {
      console.log(`[DEBUG] R√©ponse re√ßue (status: ${response.status})`);
      
      // V√©rifier si la r√©ponse est une page HTML (probl√®me d'authentification)
      if (typeof response.data === 'string' && response.data.includes('<!DOCTYPE html>')) {
        console.error(`[DEBUG] R√©ponse HTML re√ßue pour ${hour} - Probl√®me d'authentification`);
        console.error(`[DEBUG] Les cookies du compte ${account.id} semblent expir√©s ou invalides`);
        return { error: 'auth_error', hour };
      }
      
      // Afficher le contenu brut de la r√©ponse pour analyse
      console.log(`[DEBUG] Contenu brut de la r√©ponse pour ${hour}:`);
      console.log(`Type de donn√©es: ${typeof response.data}`);
      
      if (typeof response.data === 'string') {
        try {
          // Essayer de parser la r√©ponse pour voir si c'est du JSON valide
          const parsedData = JSON.parse(response.data);
          console.log('[DEBUG] R√©ponse pars√©e avec succ√®s:');
          console.log(JSON.stringify(parsedData).substring(0, 300) + '...');
          return { data: parsedData, hour }; // Retourner les donn√©es pars√©es avec l'heure
        } catch (e) {
          // Si ce n'est pas du JSON valide, afficher les premiers caract√®res
          console.log('[DEBUG] R√©ponse non-JSON:');
          console.log(response.data.substring(0, 300) + '...');
          return { data: [], hour }; // Retourner un tableau vide avec l'heure
        }
      } else {
        // Si ce n'est pas une cha√Æne, afficher l'objet directement
        console.log('[DEBUG] R√©ponse (objet):');
        console.log(JSON.stringify(response.data).substring(0, 300) + '...');
        return { data: response.data, hour };
      }
    } else {
      console.warn(`[DEBUG] R√©ponse avec code d'erreur: ${response.status}`);
      return { error: `status_${response.status}`, hour };
    }
  } catch (error) {
    console.error(`[DEBUG] Erreur lors de la requ√™te: ${error.message}`);
    
    // Si erreur 403 ou 401, le compte est peut-√™tre banni ou les cookies expir√©s
    if (error.response && (error.response.status === 403 || error.response.status === 401)) {
      console.warn(`Le compte ${account.id} semble avoir des probl√®mes d'authentification. Essayez de rafra√Æchir les cookies.`);
    }
    
    if (error.response) {
      console.error(`Status: ${error.response.status}`);
      console.error(`Donn√©es: ${JSON.stringify(error.response.data).substring(0, 200)}`);
    }
    
    return { error: error.message, hour };
  }
}

/**
 * Calcule l'heure de fin √† partir de l'heure de d√©but (ajoute 1h30)
 * @param {string} startTime - Heure de d√©but au format HH:MM
 * @returns {string} Heure de fin au format HH:MM
 */
function calculateEndTime(startTime) {
  const [hours, minutes] = startTime.split(':').map(Number);
  
  let endHours = hours;
  let endMinutes = minutes + 90; // Dur√©e standard de 1h30
  
  if (endMinutes >= 60) {
    endHours += Math.floor(endMinutes / 60);
    endMinutes = endMinutes % 60;
  }
  
  return `${endHours.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;
}

/**
 * Extrait les cr√©neaux disponibles d'une r√©ponse de l'API
 * @param {Object|Array|string} response - R√©ponse de l'API
 * @param {string} date - Date au format YYYY-MM-DD
 * @returns {Array} Liste des cr√©neaux disponibles
 */
function extractSlotsFromResponse(response, date) {
  const allSlots = [];
  
  // V√©rifier si la r√©ponse est valide
  if (!response) {
    console.log('[DEBUG] R√©ponse vide ou invalide');
    return allSlots;
  }
  
  // Afficher le type de r√©ponse pour le debug
  console.log(`[DEBUG] Type de r√©ponse: ${typeof response}`);
  
  // Si la r√©ponse est une cha√Æne JSON, la parser
  let parsedResponse = response;
  if (typeof response === 'string') {
    try {
      parsedResponse = JSON.parse(response);
      console.log('[DEBUG] R√©ponse JSON pars√©e avec succ√®s');
    } catch (error) {
      console.error('[DEBUG] Erreur lors du parsing JSON:', error.message);
      return allSlots;
    }
  }
  
  // Traiter la r√©ponse comme un tableau
  const courts = Array.isArray(parsedResponse) ? parsedResponse : [];
  
  console.log(`[DEBUG] Nombre de courts trouv√©s: ${courts.length}`);
  
  // Afficher un √©chantillon de la r√©ponse pour le debug
  if (courts.length > 0) {
    console.log('[DEBUG] Premier court:', JSON.stringify(courts[0]).substring(0, 200) + '...');
  }
  
  // Parcourir tous les courts
  for (let i = 0; i < courts.length; i++) {
    const court = courts[i];
    if (!court) continue;
    
    const courtName = court.name || `Court ${court.idCourt || i+1}`;
    
    // V√©rifier si heuresDispo existe et est un tableau
    if (!court.heuresDispo || !Array.isArray(court.heuresDispo)) {
      console.log(`[DEBUG] Court ${courtName} n'a pas de heuresDispo valide`);
      continue;
    }
    
    const heuresDispo = court.heuresDispo;
    console.log(`[DEBUG] Court ${courtName} a ${heuresDispo.length} cr√©neaux disponibles`);
    
    // Afficher un √©chantillon des heures disponibles pour le debug
    if (heuresDispo.length > 0) {
      console.log('[DEBUG] Premier cr√©neau:', JSON.stringify(heuresDispo[0]).substring(0, 200) + '...');
    }
    
    // Parcourir toutes les heures disponibles pour ce court
    for (const slot of heuresDispo) {
      if (!slot || !slot.hourStart) continue;
      
      // V√©rifier si duration est un tableau et contient au moins un √©l√©ment
      if (!Array.isArray(slot.duration) || slot.duration.length === 0) continue;
      
      const hour = slot.hourStart;
      const duration = slot.duration[0].duration || 90; // Par d√©faut 90 minutes
      const price = slot.duration[0].price || 0;
      
      // Calculer l'heure de fin
      const [hours, minutes] = hour.split(':').map(Number);
      const endMinutes = (minutes + duration) % 60;
      const endHours = (hours + Math.floor((minutes + duration) / 60)) % 24;
      const endTime = `${endHours.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;
      
      // URL unique pour tous les cr√©neaux du P4 Padel Indoor
      const uniqueP4Url = 'https://p4-padel-indoor.gestion-sports.com/membre/';
      
      // Ajouter le cr√©neau √† la liste avec l'URL unique
      allSlots.push({
        date,
        startTime: hour,
        endTime,
        court: courtName,
        courtId: court.idCourt,
        price,
        reservationLink: uniqueP4Url
      });
      
      console.log(`[DEBUG] Cr√©neau ajout√©: ${courtName} √† ${hour}`);
    }
  }
  
  console.log(`[DEBUG] Total de cr√©neaux extraits: ${allSlots.length}`);
  return allSlots;
}

/**
 * R√©cup√®re tous les cr√©neaux disponibles pour une date donn√©e
 * @param {string} date - Date au format YYYY-MM-DD
 * @param {string} [requestedHour=null] - Heure demand√©e par l'utilisateur (format HH:MM)
 * @param {number} [hourRange=3] - Plage horaire en heures autour de l'heure demand√©e (optionnel)
 * @returns {Promise<Array>} - Liste des cr√©neaux disponibles
 */
async function getAllSlotsForDate(date, requestedHour = null, hourRange = 3) {
  try {
    console.log(`R√©cup√©ration des cr√©neaux pour ${date}${requestedHour ? ` autour de ${requestedHour}` : ''}...`);
    const startTime = Date.now();
    
    // D√©terminer la plage horaire √† v√©rifier
    let startHour = 8; // Par d√©faut, commencer √† 8h
    let endHour = 22;  // Par d√©faut, terminer √† 22h
    
    // Si une heure sp√©cifique est demand√©e, ajuster la plage
    let requestedHourValue = null;
    if (requestedHour) {
      // Accepter √† la fois un nombre ou une cha√Æne de caract√®res (format HH:MM)
      if (typeof requestedHour === 'number') {
        requestedHourValue = requestedHour;
      } else if (typeof requestedHour === 'string' && requestedHour.includes(':')) {
        requestedHourValue = parseInt(requestedHour.split(':')[0], 10);
      } else {
        // Essayer de convertir en nombre
        requestedHourValue = parseInt(requestedHour, 10);
      }
      
      // V√©rifier que la conversion a fonctionn√©
      if (isNaN(requestedHourValue)) {
        console.error(`[ERREUR] Format d'heure invalide: ${requestedHour}`);
        requestedHourValue = 12; // Valeur par d√©faut en cas d'erreur
      }
      
      startHour = Math.max(8, requestedHourValue - hourRange);
      endHour = Math.min(22, requestedHourValue + hourRange);
    }
    
    console.log(`Plage horaire: ${startHour}h √† ${endHour}h`);
    
    // G√©n√©rer la cl√© de cache avec la m√©thode d√©di√©e
    const cacheKey = cache.generateKey(date, startHour, endHour);
    
    // Nettoyage des entr√©es expir√©es du cache
    cache.cleanup();
    
    // V√©rifier si les donn√©es sont en cache et valides
    const cachedData = cache.get(cacheKey);
    if (cachedData) {
      return cachedData;
    }
    
    // G√©n√©rer toutes les heures √† v√©rifier (heures pleines et demi-heures)
    const hoursToCheck = [];
    
    for (let hour = startHour; hour <= endHour; hour++) {
      // Ajouter l'heure pleine
      hoursToCheck.push(`${hour.toString().padStart(2, '0')}:00`);
      
      // Ajouter la demi-heure sauf si c'est la derni√®re heure
      if (hour < endHour) {
        hoursToCheck.push(`${hour.toString().padStart(2, '0')}:30`);
      }
    }
    
    console.log(`V√©rification de ${hoursToCheck.length} cr√©neaux horaires:`);
    console.log(hoursToCheck.join(', '));
    
    // Pr√©parer les requ√™tes pour toutes les heures
    const requests = hoursToCheck.map(hour => {
      return {
        hour,
        promise: sendPostRequest(date, hour)
          .then(result => {
            console.log(`[DEBUG] Requ√™te pour ${hour} termin√©e`);
            return { ...result, hour }; // result contient d√©j√† l'heure et les donn√©es ou l'erreur
          })
          .catch(error => {
            console.error(`[DEBUG] Erreur pour ${hour}: ${error.message}`);
            return { error: error.message, hour };
          })
      };
    });
    
    // Ex√©cuter toutes les requ√™tes en parall√®le avec un timeout de 3 secondes
    console.log(`[DEBUG] Attente de la fin de ${requests.length} requ√™tes parall√®les...`);
    
    // Cr√©er des promesses avec timeout
    const promisesWithTimeout = requests.map(req => {
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error(`Timeout pour ${req.hour}`)), 3000);
      });
      
      return Promise.race([req.promise, timeoutPromise]);
    });
    
    // Attendre que toutes les requ√™tes soient termin√©es
    const results = await Promise.all(promisesWithTimeout.map(p => p.catch(e => ({ error: e.message }))));
    
    console.log(`[DEBUG] ${results.length} requ√™tes parall√®les termin√©es en ${((Date.now() - startTime) / 1000).toFixed(3)}s`);
    
    // Traiter les r√©sultats
    console.log(`[DEBUG] Traitement des r√©ponses...`);
    
    // Compter les erreurs d'authentification
    const authErrors = results.filter(r => r.error === 'auth_error').length;
    if (authErrors > 0) {
      console.error(`[ALERTE] ${authErrors}/${results.length} requ√™tes ont √©chou√© avec des erreurs d'authentification`);
      console.error(`Les cookies semblent expir√©s ou invalides. Essayez de les rafra√Æchir.`);
      
      if (authErrors === results.length) {
        console.error(`Toutes les requ√™tes ont √©chou√© - Impossible de r√©cup√©rer les cr√©neaux`);
        return [];
      }
    }
    
    const allSlots = [];
    
    for (const result of results) {
      if (result.error) {
        console.error(`[DEBUG] Erreur pour ${result.hour || 'heure inconnue'}: ${result.error}`);
        continue;
      }
      
      if (!result.data) {
        console.error(`[DEBUG] Pas de donn√©es pour ${result.hour || 'heure inconnue'}`);
        continue;
      }
      
      console.log(`[DEBUG] Extraction des cr√©neaux pour ${result.hour || 'heure inconnue'}...`);
      const slotsForHour = extractSlotsFromResponse(result.data, date);
      console.log(`[DEBUG] ${slotsForHour.length} cr√©neaux extraits pour ${result.hour || 'heure inconnue'}`);
      
      allSlots.push(...slotsForHour);
    }
    
    // Filtrer les cr√©neaux pour ne garder que ceux dans la plage demand√©e
    const filteredSlots = allSlots.filter(slot => {
      const slotHour = parseInt(slot.startTime.split(':')[0], 10);
      return slotHour >= startHour && slotHour <= endHour;
    });
    
    console.log(`Filtrage final: ${filteredSlots.length}/${allSlots.length} cr√©neaux dans la plage de ${startHour}h √† ${endHour}h`);
    
    // √âliminer les doublons (m√™me court, m√™me heure)
    const uniqueSlots = [];
    const seenSlots = new Set();
    
    for (const slot of filteredSlots) {
      const key = `${slot.court}_${slot.startTime}`;
      if (!seenSlots.has(key)) {
        seenSlots.add(key);
        uniqueSlots.push(slot);
      }
    }
    
    // Mettre en cache les r√©sultats avec la m√©thode d√©di√©e
    cache.set(cacheKey, uniqueSlots);
    
    console.log(`Total: ${uniqueSlots.length} cr√©neaux disponibles pour ${date}`);
    console.log(`Temps total: ${((Date.now() - startTime) / 1000).toFixed(3)}s`);
    
    return uniqueSlots;
  } catch (error) {
    console.error(`Erreur lors de la r√©cup√©ration rapide des cr√©neaux: ${error.message}`);
    return [];
  }
}

/**
 * R√©cup√®re les cr√©neaux disponibles pour une date donn√©e
 * @param {string} date - Date au format YYYY-MM-DD
 * @returns {Promise<Array>} Liste des cr√©neaux disponibles
 */
async function getAvailableSlots(date) {
  // Utiliser la nouvelle m√©thode optimis√©e
  return getAllSlotsForDate(date);
}

/**
 * V√©rifie si le module peut se connecter correctement
 * Cette fonction est utilis√©e par le syst√®me de monitoring
 * @returns {Promise<boolean>} true si la connexion est r√©ussie
 */
async function testConnection() {
  try {
    console.log('Test de connexion P4 Padel Indoor...');
    
    // R√©cup√©rer un compte disponible avec ses cookies
    const account = getNextAccount();
    
    if (!account) {
      console.error('Aucun compte avec cookies valides disponible pour P4 Padel Indoor');
      return false;
    }
    
    console.log(`Compte disponible: ${account.id} (${account.email})`);
    console.log(`Date d'expiration des cookies: ${new Date(account.expiryDate).toLocaleString()}`);
    console.log(`Jours restants: ${account.daysRemaining}`);
    
    // Essayer de r√©cup√©rer les cr√©neaux pour demain (test simple)
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowStr = tomorrow.toISOString().split('T')[0];
    
    console.log(`Test avec la date de demain: ${tomorrowStr}`);
    
    // Pour le monitoring, on fait une requ√™te tr√®s limit√©e avec une heure sp√©cifique
    // et une plage horaire minimale pour √©viter d'√™tre banni
    const testHour = 14; // On teste √† 14h
    const slots = await getAllSlotsForDate(tomorrowStr, testHour, 1); // Plage de 1h seulement
    
    // Le test est r√©ussi si on a pu faire la requ√™te sans erreur
    console.log(`Test de connexion P4 Padel Indoor r√©ussi (${slots.length} cr√©neaux trouv√©s)`);
    return true;
  } catch (error) {
    console.error(`Test de connexion P4 Padel Indoor √©chou√©: ${error.message}`);
    return false;
  }
}

/**
 * Recherche les cr√©neaux disponibles pour les N prochains jours
 * @param {number} daysAhead - Nombre de jours √† rechercher
 * @returns {Promise<Object>} Cr√©neaux disponibles par date
 */
async function findSlotsForNextDays(daysAhead = 7) {
  console.log(`Recherche des cr√©neaux disponibles pour les ${daysAhead} prochains jours...`);
  
  const results = {};
  const today = new Date();
  
  for (let i = 0; i < daysAhead; i++) {
    const date = new Date(today);
    date.setDate(today.getDate() + i);
    
    // Formater la date au format YYYY-MM-DD
    const formattedDate = date.toISOString().split('T')[0];
    
    // Ajouter un d√©lai al√©atoire entre les requ√™tes pour √©viter la d√©tection
    if (i > 0) {
      const delay = Math.floor(Math.random() * 5000) + 3000; // Entre 3 et 8 secondes
      await new Promise(resolve => setTimeout(resolve, delay));
    }
    
    try {
      console.log(`\nJour ${i+1}/${daysAhead}: ${formattedDate}`);
      const slotsForDay = await getAvailableSlots(formattedDate);
      results[formattedDate] = slotsForDay;
      
      console.log(`${formattedDate}: ${slotsForDay.length} cr√©neaux disponibles`);
    } catch (error) {
      console.error(`Erreur pour la date ${formattedDate}: ${error.message}`);
      results[formattedDate] = { error: error.message };
    }
  }
  
  // Compter le nombre total de cr√©neaux
  let totalSlots = 0;
  Object.values(results).forEach(slots => {
    if (Array.isArray(slots)) {
      totalSlots += slots.length;
    }
  });
  
  console.log(`\nTotal: ${totalSlots} cr√©neaux disponibles pour les ${daysAhead} prochains jours`);
  return results;
}

module.exports = {
  getAvailableSlots,
  findSlotsForNextDays,
  testConnection,
  sendPostRequest,
  extractSlotsFromResponse,
  formatDateForApi,
  getAllSlotsForDate
};
